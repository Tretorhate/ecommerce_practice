import { Component, OnInit, inject } from '@angular/core';
import { CommonModule } from '@angular/common';
import { Router } from '@angular/router';
import { Store } from '@ngrx/store';
import { Observable, take } from 'rxjs';
import { OrderItem } from '../../shared/models/order-item.model';
import { Order } from '../../shared/models/order.model';
import { CartService } from '../../shared/services/cart/cart.service';
import { OrderUtilsService } from '../../shared/services/order-utils.service';
import * as OrdersActions from '../../store/actions/orders.actions';
import * as CartSelectors from '../../store/selectors/cart.selectors';
import * as OrdersSelectors from '../../store/selectors/orders.selectors';

@Component({
  selector: 'app-checkout',
  standalone: true,
  imports: [CommonModule],
  templateUrl: './checkout.component.html',
})
export class CheckoutComponent implements OnInit {
  private store = inject(Store);
  private cartService = inject(CartService);
  private orderUtils = inject(OrderUtilsService);
  private router = inject(Router);

  cartItems$!: Observable<OrderItem[]>;
  isLoading$!: Observable<boolean>;
  error$!: Observable<any>;

  ngOnInit() {
    this.cartItems$ = this.store.select(CartSelectors.selectCartItems);
    this.isLoading$ = this.store.select(OrdersSelectors.selectOrdersLoading);
    this.error$ = this.store.select(OrdersSelectors.selectOrdersError);

    // Check if cart is empty and redirect if needed
    this.cartItems$.pipe(take(1)).subscribe((items) => {
      if (items.length === 0) {
        this.router.navigate(['/cart']);
      }
    });
  }

  getOrderTotal(items: OrderItem[]): number {
    return this.orderUtils.calculateOrderTotal(items);
  }

  placeOrder() {
    this.cartItems$.pipe(take(1)).subscribe((items) => {
      if (items.length === 0) {
        alert('Ваша корзина пуста');
        this.router.navigate(['/cart']);
        return;
      }

      const validation = this.orderUtils.validateOrderItems(items);
      if (!validation.isValid) {
        alert(
          'Пожалуйста, исправьте следующие ошибки:\n' +
            validation.errors.join('\n')
        );
        return;
      }

      const order: Order = {
        id: '', // Will be generated by backend
        userId: '', // Will be set by backend
        createdAt: new Date().toISOString(),
        status: 'PENDING',
        total: this.getOrderTotal(items),
        items: items,
      };

      this.store.dispatch(OrdersActions.createOrder({ order }));
    });
  }
}
